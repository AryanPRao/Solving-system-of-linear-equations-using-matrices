def echelon(L,m,n):
    for row in range(0, m-1):
        pivot=0
        for column in range(n):
            if L[row][column]!=0 and column!=n-1 and pivot==0:
                pivot=L[row][column]
                t=column
                break
        if pivot!=0:
            for row1 in range(row+1,m):
                k2=L[row1][t]
                mul=k2/pivot
                if mul>=0:
                    for y in range(n):
                        L[row1][y]=L[row1][y]-(mul*(L[row][y]))
                else:
                    mul=-1*mul
                    for y in range(n):
                        L[row1][y]=L[row1][y]+(mul*(L[row][y]))
    return L
                        
def reduced_echelon(L,m,n):
    for row in range(1,m):
        pivot=0
        for column in range(n):
            if L[row][column]!=0 and column!=n-1 and pivot==0:
                pivot=L[row][column]
                t=column
                break
        if pivot!=0:
            for row1 in range(0,row):
                k1=L[row1][t]
                mul=k1/pivot
                if mul>=0:
                    for y in range(n):
                        L[row1][y]=L[row1][y]-(mul*(L[row][y]))
                else:
                    mul=-1*mul
                    for y in range(n):
                        L[row1][y]=L[row1][y]+(mul*(L[row][y]))
    return L

def adjust(red):

#to shift rows of 0 to last if exists
    temp=[]
    for i in red:
        flag=True
        for j in i:
            if j!=0 or j!=0.0:
                flag=False
        if flag:
            temp.append(i)
            red.remove(i)
    for i in temp:
        red.insert(rows-1,i)
    return red

def equations(red):
    for i in red:
        s=""
        for j in range(len(i)-1):
            x=str(((i[j])))+"x"+str(j+1)
            if i[j]==0:
                continue
            else:
                s=s+x+"+"
        if s=="":
            continue
        else:
            k=s[:-1]
            k=k+"="+str(i[-1])
            print(k)

def func(L):
    for i in L:
        max=0
        for j in i:
            k=len(str(j))-(len(str(int(j)))+1)
            if k>max:
                max=k
        for x in range(len(i)):
            i[x]=int(i[x]*(10**max))
    return L

def gcd1(x,y):
    while y:
        x,y=y,x%y
    return x

def matrix_print(red):
    for i in red:
        print(i)
    print()


rows=4
columns=5
L=[[1,2,1,2,10],[3,0,1,1,16],[1,2,-4,-1,5],[8,2,1,-2,45]]    #example input
reduced_matrix=reduced_echelon(echelon(L,rows,columns), rows, columns)
reduced_matrix=adjust(reduced_matrix)

#to round up decimal to 3 places
for i in reduced_matrix:
    for j in range(len(i)):
        k=round(i[j],3)
        i[j]=k

      
#to check if matrix is consistent or not
count_of_inconsistent_rows=0
for i in reduced_matrix:
    flag=True
    for j in range(len(i)):
        if i[j]!=0 and j!=len(i)-1:
            flag=False
    if flag:
        if i[-1]!=0:
            print("No solution")
            count_of_inconsistent_rows+=1
if count_of_inconsistent_rows==0:
    #converts all decimal values to integers
    reduced_matrix=func(reduced_matrix)
    
    #converts the rows to its lowest form  (E.g 2 and 4 become 1 and 2)
    for i in reduced_matrix:
        num1=i[0]
        num2=i[1]
        gcd=gcd1(num1,num2)
        for x in range(2, len(i)):
            gcd=gcd1(gcd,i[x])
        for y in range(len(i)):
            if gcd!=0:
                i[y]=int(i[y]/gcd)


#converting the pivots to 1
for i in reduced_matrix:
    for j in range(len(i)):
        if i[j]!=0 and i[j]!=1 and j!=columns-1:
            f=i[j]
            for h in range(len(i)):
                i[h]=i[h]/f

#converting decimals such as 1.0,2.0,3.0 to integers 1,2,3
for i in reduced_matrix:
    for j in range(len(i)):
        if i[j]==int(i[j]):
            i[j]=int(i[j])

#display answers
matrix_print(reduced_matrix)
equations(reduced_matrix)